/*
 * 给定一串长度不超过 10
​5
​​  的字符串，本题要求你将其中所有英文字母的序号（字母 a-z 对应序号 1-26，不分大小写）相加，得到整数 N，然后再分析一下 N 的二进制表示中有多少 0、多少 1。例如给定字符串 PAT (Basic)，其字母序号之和为：16+1+20+2+1+19+9+3=71，而 71 的二进制是 1000111，即有 3 个 0、4 个 1。

输入格式：
输入在一行中给出长度不超过 10
​5
​​ 、以回车结束的字符串。

输出格式：
在一行中先后输出 0 的个数和 1 的个数，其间以空格分隔。

输入样例：
PAT (Basic)
输出样例：
3 4
 */

#include <iostream>

using namespace std;

int main() {
    char a[100001];
    cin.getline(a, sizeof(a));  //也可以scanf( "%[^\n]", a );   即读带空格的字符串
    int n = 0;
    for (int i = 0; a[i] != '\0'; ++i) {
        if (a[i] >= 'a' && a[i] <= 'z') {
            n += a[i] - 'a' + 1;
        }
        if (a[i] >= 'A' && a[i] <= 'Z') {
            n += a[i] - 'A' + 1;
        }
    }

    int cnt0 = 0, cnt1 = 0;
    int p = n;
    for (int i = 0; p != 0; ++i) {
        if (p % 2 == 0) {
            cnt0++;
        } else {
            cnt1++;
        }
        p /= 2;
    }
    cout << cnt0 << " " << cnt1;
}